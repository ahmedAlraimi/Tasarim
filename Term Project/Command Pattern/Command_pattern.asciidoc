
# Design Patterns

In software engineering, a design pattern is a general repeatable solution to a commonly occurring problem in software design. A design pattern isn't a finished design that can be transformed directly into code. It is a description or template for how to solve a problem that can be used in many different situations.

## Behavioral design patterns:

In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication.


### * Command Pattern :

Command pattern is a data driven design pattern and falls under behavioral pattern category. A request is wrapped under an object as command and passed to invoker object. Invoker object looks for the appropriate object which can handle this command and passes the command to the corresponding object which executes the command.
 
#### CODE 

Run Code in : image:img/sandbox.png[link="http://sandbox.onlinephpfunctions.com/code/1391a622cc507d9023c39db11d7e5f858bd5c89c"]


[source, php]
----
<?php

interface EventCommand
{
    /**
     * this is the most important method in the Command pattern,
     */
    public function execute();
}

// Event Class
class EventLocation {
    private $address;
    private $seat_no;

    public function __construct()
    {
        $this->address = 'Engineering_Hall_10';
        $this->seat_no = 30;
    }

    public function reserve() {
        $statement = "\n Event Location at " . $this->address . " - " . $this->seat_no . " Seats (RESERVED)";
        print $statement;
    }
    
    public function confirm() {
        $statement = "\n Event Location at " . $this->address . " - " . $this->seat_no . " Seats (CONFIRMED)";
        print $statement;
    }
}

class ReserveLocation implements EventCommand {
    private $event_location;

    public function __construct(EventLocation $event_location) {
        $this->event_location = $event_location;
    }
    
    public function execute()
    {
        $this->event_location->reserve();
    }
}

class ConfirmLocation implements EventCommand {
    private $event_location;

    public function __construct(EventLocation $event_location) {
        $this->event_location = $event_location;
    }
    
    public function execute()
    {
        $this->event_location->confirm();
    }
}

class Invoker
{
    
    private $command;

    public function setCommand(EventCommand $cmd)
    {
        $this->command = $cmd;
    }

    /**
     * executes the command; the invoker is the same whatever is the command
     */
    public function run()
    {
        $this->command->execute();
    }
}

//Implementation
print "\nBEGIN TESTING COMMAND PATTERN ";

$location = new EventLocation();

$reserveCommand = new reserveLocation($location);
$confirmCommand = new confirmLocation($location);

$invoker = new Invoker();

$invoker->setCommand($reserveCommand);
print "\n\n Reserve Command is set ";
$invoker->run();

$invoker->setCommand($confirmCommand);
print "\n\n Confirm Command is set ";
$invoker->run();



?>


----

#### Result :

[source,]
----
BEGIN TESTING COMMAND PATTERN 

 Reserve Command is set 
 Event Location at Engineering_Hall_10 - 30 Seats (RESERVED)

 Confirm Command is set 
 Event Location at Engineering_Hall_10 - 30 Seats (CONFIRMED)

----

[plantuml]
----
@startuml
skinparam classAttributeIconSize 0

interface EventCommand{
  {method} + execute()
}

class EventLocation {
  {field} - address : String
  {field} - seat_no : Integer
  {method} + reserve()
  {method} + confirm()
}

class ReserveLocation {
  {field} - event_location
  {method} + __construct(EventLocation)
  {method} + execute()
}

class ConfirmLocation {
  {field} - event_location
  {method} + __construct(EventLocation)
  {method} + execute()
}

class Invoker {
  {field} - command : EventCommand
  {method} + setCommand(EventLocation)
  {method} + run()
}

Invoker --> EventCommand : uses
EventLocation -> Invoker : uses
ReserveLocation -> EventCommand : implements
EventCommand <- ConfirmLocation : implements


@enduml
----



