

# Design Patterns

In software engineering, a design pattern is a general repeatable solution to a commonly occurring problem in software design. A design pattern isn't a finished design that can be transformed directly into code. It is a description or template for how to solve a problem that can be used in many different situations.

## Creational design patterns:

These design patterns are all about class instantiation. This pattern can be further divided into class-creation patterns and object-creational patterns. While class-creation patterns use inheritance effectively in the instantiation process, object-creation patterns use delegation effectively to get the job done.


### * Builder Pattern :
Builder pattern builds a complex object using simple objects and using a step by step approach. A Builder class builds the final object step by step. This builder is independent of other objects.

#### CODE 

Run Code in : image:img/sandbox.png[link="http://sandbox.onlinephpfunctions.com/code/2c861c5caf5a85a4395898ddbf26786062de037e"]


[source, php]
----
<?php

/**
* EventBuilder
*/

interface EventInterface {
    function getEventInfo();
}

class Event implements EventInterface {
    private $manager;
    private $location;
    private $date_time;
    private $description;
    
    function __construct($manager, $location, $date_time, $description) {
        $this->manager = $manager;
        $this->location = $location;
        $this->date_time = $date_time;
        $this->description = $description;
    }
    
    
    // getters
    function getEventManager() {
        return $this->manager;
    }
    function getLocation() {
        return $this->location;
    }
    function getDateTime() {
        return $this->date_time;
    }
    function getDescription() {
        return $this->description;
    }
    
    function getEventInfo() {
        return "Event : Event Manager : " . $this->manager . ", Location : " . $this->location 
        . ", Date/Time : " . $this->date_time . ", Description : " . $this->description . "\r\n\n";
    }
    
} //End  Event

class EventManager{
    private $manager;
    function __construct($manager) {
        $this->manager = $manager;
    }
    function getEventManager() {
        return $this->manager;
    }
}

class Location{
    private $location;
    function __construct($location) {
        $this->location = $location;
    }
    function getLocation() {
        return $this->location;
    }
}

// Event Builder
class EventBuilder{
    function makeEvent($manager, $location, $date_time, $description){
        $m = new EventManager($manager);
        $l = new Location($location);
        return new Event($m->getEventManager(), $l->getLocation(), $date_time, $description);
    }
 }

/**
 * Initialization
 */

 print "BEGIN TESTING (EventBuilder) BUILDER PATTERN \r\n\n";

    $event_builder = new EventBuilder();
    
    // build event 1
    $event1 =  $event_builder->makeEvent('Mert', 'Seka Park', '2019-05-06', 'Spring Event 1');
    print "EVENT(1) => " . $event1->getEventInfo();
    
    // build event 2
    $event2 =  $event_builder->makeEvent('Hasan', ' City Football Court', '2019-08-06', 'Sport Event');
    print "EVENT(2) => " . $event2->getEventInfo();


?>

----

#### Result :

[source,]
----

BEGIN TESTING (EventBuilder) BUILDER PATTERN 

EVENT(1) => Event : Event Manager : Mert, Location : Seka Park, Date/Time : 2019-05-06, Description : Spring Event 1

EVENT(2) => Event : Event Manager : Hasan, Location :  City Football Court, Date/Time : 2019-08-06, Description : Sport Event

----

[plantuml]
----
@startuml

skinparam classAttributeIconSize 0
class EventBuilder {
  {method} + makeEvent(String, String ,String,String)
}

Interface EventInterface {
  {method} + getEventInfo()
}

class Event {
  {field} - manager : String
  {field} - location : String
  {field} - date_time : String
  {field} - description : String
  {method} + getEventManager()
  {method} + getLocation()
  {method} + getDateTime()
  {method} + getDescription()
  {method} + getEventInfo()
}

class EventManager {
  {field} - manager : String
  {method} + getEventManager()
}

class Location {
  {field} - location : String
  {method} + getLocation()
}

Event <- EventBuilder : builds
EventBuilder --> EventManager : uses
EventBuilder --> Location : uses
EventInterface <-- Event : implements


@enduml
----

