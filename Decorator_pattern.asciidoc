
# Design Patterns

In software engineering, a design pattern is a general repeatable solution to a commonly occurring problem in software design. A design pattern isn't a finished design that can be transformed directly into code. It is a description or template for how to solve a problem that can be used in many different situations.

## Structural design patterns:

In Software Engineering, Structural Design Patterns are Design Patterns that ease the design by identifying a simple way to realize relationships between entities.


### * Decorator Pattern :

Decorator pattern allows a user to add new functionality to an existing object without altering its structure. This type of design pattern comes under structural pattern as this pattern acts as a wrapper to existing class.

This pattern creates a decorator class which wraps the original class and provides additional functionality keeping class methods signature intact.
 
#### CODE 

Run Code in : image:img/sandbox.png[link="http://sandbox.onlinephpfunctions.com/code/77b1031789b8cd9ec4b4f824d021a34ae0ad4b97"]


[source, php]
----
<?php

interface EventTicket
{
    public function calculatePrice();

    public function getDescription();
}

abstract class EventTicketDecorator implements EventTicket
{
    /**
     * @var EventTicket
     */
    protected $event_ticket;

    public function __construct(EventTicket $event_ticket)
    {
        $this->event_ticket = $event_ticket;
    }
}

class Ticket implements EventTicket
{
    public function calculatePrice()
    {
        return 40;
    }

    public function getDescription()
    {
        return 'Ticket';
    }
}

class Transportation extends EventTicketDecorator
{
    private const PRICE = 5;

    public function calculatePrice()
    {
        return $this->event_ticket->calculatePrice() + self::PRICE;
    }

    public function getDescription()
    {
        return $this->event_ticket->getDescription() . ' with transportation';
    }
}

class OpenBuffet extends EventTicketDecorator
{
    private const PRICE = 10;

    public function calculatePrice()
    {
        return $this->event_ticket->calculatePrice() + self::PRICE;
    }

    public function getDescription()
    {
        return $this->event_ticket->getDescription() . ' with open buffet';
    }
}

//Implementation
print "\nBEGIN TESTING DECORATOR PATTERN ";

$only_ticket_bill = new Ticket();
print "\n\n Bill : " . $only_ticket_bill->calculatePrice() . " - Description : " . $only_ticket_bill->getDescription();

$tran_ticket_bill = new Ticket();
$tran_ticket_bill = new Transportation($tran_ticket_bill);
print "\n\n Bill : " . $tran_ticket_bill->calculatePrice() . " - Description : " . $tran_ticket_bill->getDescription();


$buffet_tran_ticket_bill = new Ticket();
$buffet_tran_ticket_bill = new Transportation($buffet_tran_ticket_bill);
$buffet_tran_ticket_bill = new OpenBuffet($buffet_tran_ticket_bill);
print "\n\n Bill : " . $buffet_tran_ticket_bill->calculatePrice() . " - Description : " . $buffet_tran_ticket_bill->getDescription();


?>

----

#### Result :

[source,]
----
BEGIN TESTING DECORATOR PATTERN 

 Bill : 40 - Description : Ticket

 Bill : 45 - Description : Ticket with transportation

 Bill : 55 - Description : Ticket with transportation with open buffet
----

[plantuml]
----
@startuml
skinparam classAttributeIconSize 0

interface EventTicket{
  {method} + calculatePrice()
  {method} + getDescription()
}

class EventTicketDecorator {
  {field} - event_ticket : EventTicket
  {method} + __construct(EventTicket)
}

class Ticket {
  {method} + calculatePrice()
  {method} + getDescription()
}

class Transportation {
  {field} - PRICE
  {method} + calculatePrice()
  {method} + getDescription()
}

class OpenBuffet {
  {field} - PRICE
  {method} + calculatePrice()
  {method} + getDescription()
}

EventTicket <.. EventTicketDecorator
EventTicket <.. Ticket

EventTicketDecorator <-- Transportation
EventTicketDecorator <-- OpenBuffet

@enduml
----



